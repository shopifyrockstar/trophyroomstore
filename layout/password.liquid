<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0">

  {%- if settings.favicon -%}
    <link rel="shortcut icon" href="{{ settings.favicon | img_url: '32x32' }}" type="image/png" />
  {%- endif -%}

	<title>{{ shop.name | escape }}</title>

  {%- if page_description -%}
    <meta name="description" content="{{ page_description | escape }}">
  {%- endif -%}

	{%- render 'open-graph' -%}

	<link rel="canonical" href="{{ canonical_url }}">

  <link rel="preconnect" href="https://cdn.shopify.com">
  {%- unless settings.headings_font.system? and settings.body_font.system? -%}
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
  {%- endunless -%}

  {%- render 'head-variables' -%}

  <link rel="preload" as="script" href="{{ 'theme.js' | asset_url }}">
  <link rel="preload" as="style" href="{{ 'theme.css' | asset_url }}">
  {{ 'theme.css' | asset_url | stylesheet_tag }}

	{{ content_for_header }}
  
  <script>
    const ProductHeaderHelper = productSelector => {
      const originalHeader = document.querySelector(`${productSelector} .product__header`);
      let duplicateHeader = document.createElement('div');
      duplicateHeader.classList = 'product__header-mobile hide smaller-lap--show-block';
      duplicateHeader.innerHTML = document.querySelector(`${productSelector} product-header`).innerHTML;
      duplicateHeader.querySelector('.product__price').id = "";
      document.querySelector(`${productSelector}`).prepend(duplicateHeader);
      duplicateHeader = duplicateHeader.querySelector('.product__header');
      const headerObserver = new MutationObserver(mutations=>{
        for ( const mutation of mutations ) {
          duplicateHeader.innerHTML = originalHeader.innerHTML;
        }
      });
      headerObserver.observe(originalHeader,{ attributes: false, childList: true, subtree: true })
    }
  </script>

  <noscript>
    {{ 'theme-noscript.css' | asset_url | stylesheet_tag }}
  </noscript>

</head>

<body class="template-password no-touchevents image-reveal--{{ settings.image_reveal }}">

  <script>
    if ('loading' in HTMLImageElement.prototype) {
      document.body.classList.add('loading-support');
    }
  </script>

  <a href="#main" class="visually-hidden skip-to-content" tabindex="1">{{ 'general.accessibility_labels.skip_to_content' | t }}</a>

	<div class="password page-content">
		<div class="password-content-wrapper">
			{%- section 'main-password-header' -%}
			<div class="password-content">{{ content_for_layout }}</div>
		</div>

		<div class="password-footer text-size--smaller">
			{%- capture shopify -%}
				<a class="shopify-link" href="//shopify.com" rel="nofollow" target="_blank" title="Create your own online store with Shopify" style="border-bottom: 1px solid;">
					<span class="shopify-name">Shopify</span>
				</a>
			{%- endcapture -%}
			{{ 'password_page.powered_by_shopify_html' | t: shopify: shopify }}
		</div>

	</div>	
  
  <script>

    window.preloadImages = (element=document)=> {
      let lazyImages = element.querySelectorAll('img.lazy');
      for (let img of lazyImages) {
        if (!img.complete) {
          img.addEventListener('load', lazyImageLoad, false);
        } else if (img.complete) {
          lazyImageLoad({currentTarget: img});
        }
      }
      function lazyImageLoad(e) {
        e.currentTarget.classList.add('lazyloaded');
      }
    }
    window.preloadImages();

    window.prlxElementsPusher = function(element) {
      let elements = element.querySelectorAll('[data-scroll-speed]');
      if ( element.classList.contains('mount-parallax-w-padding' ) ) {
        let i = elements.length-1;
        while(i >= 0){
          if ( Number(elements[i].getAttribute('data-scroll-speed')) < 0 ) {
            elements[i].setAttribute('data-scroll-speed', '-.1');
            break;
          }
          i--;
        }
      }
      elements.forEach(function(element){
        window.prlxElements.push({
          element: element,
          factor: Number(element.getAttribute('data-scroll-speed')),
          parent: document.getElementById(element.getAttribute('data-scroll-parent')),
          mirror: element.hasAttribute('data-scroll-mirror'),
          resistance: element.hasAttribute('data-scroll-resistance')
        });
      });
    }

    window.prlxElements = [];
    window.prlxRaf = true;
    document.querySelectorAll('.mount-parallax').forEach(function(element){
      window.prlxElementsPusher(element);
    });

    window.addEventListener('scroll', function(){
      if ( window.prlxRaf ) {
        window.prlxRaf = false;
        requestAnimationFrame(window.prlxAnimation.bind(this));
      }
    }, {passive: true});

    window.prlxAnimation = function(){
      const windowHeight = document.documentElement.clientHeight;
      const windowWidth = document.documentElement.clientWidth;
      window.prlxElements.forEach(function(item, i){
        let elementY = item.element.getBoundingClientRect().y;
        if ( item.resistance ) {
          let parentY = item.parent.getBoundingClientRect().y - windowHeight;
          if ( parentY < 0 && Math.abs(parentY) < (item.parent.offsetHeight + windowHeight) ) {
            let prlx = Math.abs(parentY) * Math.min(windowHeight, windowWidth) / (item.parent.offsetHeight + windowHeight);
            item.element.style.transform = 'translateY(' + (prlx) + 'px)';
          }
        } else {
          if ( elementY < windowHeight * 2 && elementY > (item.element.offsetHeight + windowHeight)*-1 ) {
            let prlx = 0;
            if ( item.parent ) {
              prlx = (item.parent.getBoundingClientRect().y - (windowHeight - item.parent.offsetHeight)/2) * item.factor;
              if ( windowWidth < 600 ) {
                prlx /= 2;
              }
              if ( item.mirror && prlx < 0 ) {
                prlx = 0;
              }
            } else {
              prlx = Math.round(((window.scrollY + windowHeight) - (item.element.offsetTop))*item.factor / -2);
              if ( item.padding ) {
                if ( prlx >= 0 ) {
                  item.element.parentElement.style.paddingBottom = prlx + 'px';
                } else {
                  item.element.parentElement.style.paddingBottom = '0px';
                }
              }
            }
            if ( Math.abs(prlx) < windowHeight ) {
              item.element.style.transform = 'translateY(' + (prlx) + 'px)';
            }
          }
        }
      });
      this.prlxRaf = true;
    }

    window.prlxAnimation();

    window.addEventListener('resize', function(){
      window.prlxAnimation();
    });

    if ( 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch ) {
      document.querySelector('body').classList.remove('no-touchevents');
      document.querySelector('body').classList.add('touchevents');
    } 

    KROWN = {
      settings: {
        shop_money_format: '{{ shop.money_format }}',
        cart_action: "{{ settings.cart_action }}",
        routes: {
          cart_url: "{{ routes.cart_url }}",
          cart_add_url: "{{ routes.cart_add_url }}",
          cart_change_url: "{{ routes.cart_change_url }}",
          predictive_search_url: "{{ routes.predictive_search_url }}"
        },
        locales: {
          cart_add_error: `{{ 'cart.add_error' | t }}`,
          cart_general_error: `{{ 'cart.general_error' | t }}`,
          products_add_to_cart_button: `{{ 'product.page.add_to_cart_button' | t }}`,
          products_sold_out_variant: `{{ 'product.inventory.sold_out_variant' | t }}`,
          products_unavailable_variant: `{{ 'product.inventory.unavailable_variant' | t }}`,
          products_one_product: `{{ 'product.inventory.one_product' | t }}`,
          products_few_products: `{{ 'product.inventory.few_products' | t }}`,
          products_no_products: `{{ 'product.inventory.no_products' | t }}`,
          products_preorder: `{{ 'product.inventory.selling_when_out_of_stock' | t }}`,
          product_sku: `{{ 'product.page.sku' | t }}`,
          product_barcode: `{{ 'product.page.barcode' | t }}`,
          product_read_review: `{{ 'product.read_full_review' | t }}`,
          next: `{{ 'general.accessibility_labels.next' | t }}`,
          prev: `{{ 'general.accessibility_labels.previous' | t }}`
        },
        symbols: {
          arrow: `{%- render 'theme-symbols', icon: 'arrow-right' -%}`,
          zoom_out: `{%- render 'theme-symbols', icon: 'zoom-out' -%}`,
          star: `{%- render 'theme-symbols', icon: 'star' -%}`,
          plus: `{%- render 'theme-symbols', icon: 'plus' -%}`,
          toggle_pack: `<svg aria-hidden="true" focusable="false" role="presentation" class="symbol symbol--minus" width="17" height="17" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.48511 7.00293H15.4852V9.13403H1.48511V7.00293Z" fill="#111111"/></svg><svg aria-hidden="true" focusable="false" role="presentation" class="symbol symbol--plus" width="17" height="18" viewBox="0 0 17 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.48517 7.48145H15.4852V9.61255H1.48517V7.48145Z" fill="#111111"/><path d="M9.48517 1.08789V16.0056H7.48517V1.08789H9.48517Z" fill="#111111"/></svg>`
        },
        predictive_search_enabled: "{{ settings.predictive_search_enabled }}"
      }
    };

    if ( ! JSON.parse(document.getElementById('shopify-features').text).predictiveSearch ) {
      KROWN.settings.predictive_search_enabled = "false";
      document.getElementById('search-open-button').setAttribute('id', '');
    }
    
  </script>

  <script src="{{ 'theme.js' | asset_url }}" defer></script>

  {%- if settings.show_variant_image -%}
    <script>
      class ProductItemVariants extends HTMLElement {
        constructor(){
          super();
          const productItemVariants = this.querySelectorAll('.product-item__variant');
          const productLink = this.closest('.product-item').querySelector('.product-item__link');
          let variantZIndex = 9;
          setTimeout(()=>{
            productItemVariants.forEach(elm=>{
              if ( this.querySelector('.product-item__variant-image') ) {
                if ( productLink.querySelector('.product-item__image') ) {
                  productLink.querySelector('.product-item__image').appendChild(this.querySelector('.product-item__variant-image'));
                }
              }
              elm.addEventListener('click', e=>{
                productItemVariants.forEach(elm=>{elm.classList.remove('active')});
                e.currentTarget.classList.add('active');
                productLink.setAttribute('href', e.currentTarget.dataset.href);
                const variantImage = productLink.querySelector(`.product-item__variant-image[data-id="${e.currentTarget.dataset.id}"]`);
                if ( variantImage ) {
                  variantImage.classList.remove('active');
                  variantImage.style.zIndex = ++variantZIndex;
                  setTimeout(()=>{
                    variantImage.classList.add('active');
                  }, 10);
                }
              })
            })
          }, 500);
        }
      }
      customElements.define('product-item-variants', ProductItemVariants);
    </script>
  {%- endif -%}

  {%- if request.design_mode -%}
    <script src="{{ 'theme-editor.js' | asset_url }}" async></script>
  {%- endif -%}

</body>

</html>