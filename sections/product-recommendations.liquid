<product-recommendations class="product-recommendations" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ section.settings.products_number }}">
  {%- if recommendations.performed and recommendations.products_count > 0 -%}
    <div class="section-w-margin">

      {%- if section.settings.heading != blank -%}
        <div class="section-header grid-item push-left-one-tenth lap--push-left-padding">
          <h2 class="section-header__title h4">{{ section.settings.heading | escape }}</h2>
        </div>
      {%- endif -%}

      <css-slider id="css-slider-recommended-products" 
        class="css-slider css-slider--snapping products-slider"
        data-navigation-class="ten-tenths lap--twelve-tenths push-left-one-tenth lap--push-left-padding"
      >
        <div class="css-slides-container grid">
          {%- liquid
            assign sizes = 'sizes="(max-width: 599px) calc(100vw - 90px), (max-width: 1023px) calc(50vw - 80px), 25vw"'
            for recommendation in recommendations.products
              assign css_class = 'css-slide three-tenths lap--smart-width palm--smart-width '
              if forloop.first 
                assign css_class = css_class | append: 'push-left-one-tenth lap--push-left-padding'
              else 
                assign css_class = css_class | append: 'push-left-half-tenth lap--push-left-padding'
              endif
              render 'product-item', product: recommendation, css_class: css_class, index: forloop.index0, sizes: sizes
            endfor
          -%}
        </div>
      </css-slider>

    </div>
  {%- endif -%}
</product-recommendations>

{% javascript %}
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();
      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);
        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const innerHTML = new DOMParser()
                .parseFromString(text, 'text/html')
                .querySelector('product-recommendations');
            if ( innerHTML && innerHTML.querySelectorAll('.product-item').length > 0 ) {
              this.innerHTML = innerHTML.innerHTML;
              document.querySelector('.shopify-section-product-recommendations').classList.add('section-w-margin');
            } 
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
  {
    "name": "t:sections.product-recommendations.name",
    "class": "shopify-section-product-recommendations",
    "settings": [
      {
        "type": "header",
        "content": "t:sections.product-recommendations.settings.header__1.content",
        "info": "t:sections.product-recommendations.settings.header__1.info"
      },
      {
        "type": "text",
        "id": "heading",
        "label": "t:sections.product-recommendations.settings.heading.label",
        "default": "Recommended products"
      },
      {
        "type": "range",
        "id": "products_number",
        "label": "t:sections.featured-collection.settings.products_number.label",
        "min": 3,
        "max": 6,
        "step": 1,
        "default": 3
      }
    ]
  }
{% endschema %}